import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from io import BytesIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤", page_icon="üé®")
st.title("üé® –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤")
st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –æ–¥–Ω–∏–º —Å—Ç–æ–ª–±—Ü–æ–º —Ü–≤–µ—Ç–æ–≤ (—Å–∏–Ω–∏–π, –∑–µ–ª–µ–Ω—ã–π, –∫—Ä–∞—Å–Ω—ã–π, –∂–µ–ª—Ç—ã–π)")

# –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
COLOR_MAP = {
    '—Å–∏–Ω–∏–π': '#1f77b4',
    '–∑–µ–ª–µ–Ω—ã–π': '#2ca02c',
    '–∫—Ä–∞—Å–Ω—ã–π': '#d62728',
    '–∂–µ–ª—Ç—ã–π': '#ffcc00'
}

def process_file(uploaded_file):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    try:
        # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        df = pd.read_excel(uploaded_file)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if len(df.columns) != 1:
            st.error("–û—à–∏–±–∫–∞: –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü")
            return None
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        color_col = df.columns[0]
        colors = df[color_col].astype(str).str.strip().str.lower()
        
        return colors
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª", type=['xlsx', 'xls'])

if uploaded_file is not None:
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
    colors = process_file(uploaded_file)
    
    if colors is not None:
        # –ü–æ–¥—Å—á–µ—Ç —Ü–≤–µ—Ç–æ–≤
        color_counts = colors.value_counts().reset_index()
        color_counts.columns = ['–¶–≤–µ—Ç', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤
        valid_colors = color_counts[color_counts['–¶–≤–µ—Ç'].isin(COLOR_MAP.keys())]
        invalid_colors = color_counts[~color_counts['–¶–≤–µ—Ç'].isin(COLOR_MAP.keys())]
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥—Å—á–µ—Ç–∞")
        st.dataframe(valid_colors)
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ü–≤–µ—Ç–∞—Ö
        if not invalid_colors.empty:
            st.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ü–≤–µ—Ç–∞: {', '.join(invalid_colors['–¶–≤–µ—Ç'])}")
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        if not valid_colors.empty:
            # –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
            fig_bar = px.bar(
                valid_colors,
                x='–¶–≤–µ—Ç',
                y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                color='–¶–≤–µ—Ç',
                color_discrete_map=COLOR_MAP,
                title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤'
            )
            st.plotly_chart(fig_bar)
            
            # –ö—Ä—É–≥–æ–≤–æ–π –≥—Ä–∞—Ñ–∏–∫
            fig_pie = px.pie(
                valid_colors,
                names='–¶–≤–µ—Ç',
                values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                color='–¶–≤–µ—Ç',
                color_discrete_map=COLOR_MAP,
                title='–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ'
            )
            st.plotly_chart(fig_pie)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total = valid_colors['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()
            st.write(f"**–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:** {total}")
            for _, row in valid_colors.iterrows():
                percentage = (row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] / total) * 100
                st.write(f"- {row['–¶–≤–µ—Ç']}: {row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']} ({percentage:.1f}%)")
        else:
            st.warning("–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ü–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
st.markdown("---")
st.subheader("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
if st.button("–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"):
    colors_list = list(COLOR_MAP.keys())
    probs = [0.5, 0.25, 0.05, 0.2]
    sample = np.random.choice(colors_list, size=100, p=probs)
    sample_df = pd.DataFrame({"–¶–≤–µ—Ç": sample})
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç–∏
    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        sample_df.to_excel(writer, index=False)
    
    # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞",
        data=output.getvalue(),
        file_name="sample_colors.xlsx",
        mime="application/vnd.ms-excel"
    )
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    st.write("–ü–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ –ø—Ä–∏–º–µ—Ä–∞ —Ñ–∞–π–ª–∞:")
    st.dataframe(sample_df.head(10))